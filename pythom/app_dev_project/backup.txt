{% extends "base.html" %}
{% block title %}Create stock item{% endblock %}

{% block content %}
{% from "includes/_formHelper.html" import render_field %}

<h1 class="display-4">Create stock item</h1>

<form method="POST" action="" enctype=multipart/form-data>
  <h2>Image for item</h2>
  <input type=file name=file required>
  <div class="form-group">
    {{ render_field(form.stock_name, class="form-control") }}
  </div>
  <!--
  <div class="form-group">
    {{ render_field(form.supplier_name, class="form-control") }}
  </div>
  <div class="form-group">
    {{ render_field(form.amt_of_stock, class="form-control") }}
  </div>
  <div class="form-group">
    {{ render_field(form.stock_left, class="form-control") }}
  </div>
  -->
  <input type="submit" value="Submit" class="btn btn-primary"/>
</form>
{% endblock %}


from wtforms import Form, StringField, RadioField, SelectField, TextAreaField, validators


class CreateUserForm(Form):
    stock_name = StringField('First Name', [validators.Length(min=1, max=150), validators.DataRequired()])
    #amt_of_stock = StringField('amt_of_stock', [validators.Length(min=1, max=150), validators.DataRequired()])
    #stock_left = StringField('stock_left', [validators.Length(min=1, max=150), validators.DataRequired()])
    #supplier_name = StringField('Last Name', [validators.Length(min=1, max=150), validators.DataRequired()])
    """
    email = StringField('email', [validators.Length(min=1, max=150), validators.DataRequired()])
    order_number = StringField('order_number', [validators.Length(min=1, max=150), validators.DataRequired()])
    price = StringField('price', [validators.Length(min=1, max=150), validators.DataRequired()])
    origin = StringField('origin', [validators.Length(min=1, max=150), validators.DataRequired()])
    weight = StringField('weight', [validators.Length(min=1, max=150), validators.DataRequired()])
    Dietary = SelectField('dietary', [validators.Optional()], choices=[
        ('', 'Select'), ('Halal', 'Halal'), ('Healthier','Healthier choice'), ('Organic', 'Organic'), ('Vegetarian', 'Vegetarian'),
        ('Gluten-Free', 'Gluten-Free'), ('Trans-Fat-Free', 'Trans-Fat-Free'), ('Hypoallergenic', 'Hypoallergenic'), ('Lactose-Free', 'Lactose-Free')
    ], default='')
    ingredients = TextAreaField('ingredients', [validators.Optional()])
    description = TextAreaField('description', [validators.Optional()])
    """



class Stock_item:
    count_id = 0

    def __init__(self, stock_name):
        Stock_item.count_id += 1
        self.__id = Stock_item.count_id
        self.__stock_name = stock_name
        self.__supplier_name = "supplier_name"
        self.__amt_of_stock = "amt_of_stock"
        self.__stock_left = "stock_left"
        self.__email = ""
        self.__order_amt = ""

    def get_id(self):
        return self.__id

    def get_stock_name(self):
        return self.__stock_name

    def get_supplier_name(self):
        return self.__supplier_name

    def get_amt_of_stock(self):
        return self.__amt_of_stock

    def get_stock_left(self):
        return self.__stock_left

    def get_email(self):
        return self.__email

    def get_order_amt(self):
        return self.__order_amt

    def set_stock_name(self, stock_name):
        self.__stock_name = stock_name

    def set_supplier_name(self, supplier_name):
        self.__supplier_name = supplier_name

    def set_amt_of_stock(self, amt_of_stock):
        self.__amt_of_stock = amt_of_stock

    def set_stock_left(self, stock_left):
        self.__stock_left = stock_left

    def set_email(self, email):
        self.__email = email

    def set_order_amt(self, order_amt):
        self.__order_amt = order_amt

def create_stock():
    create_stock_item = CreateUserForm(request.form)
    if request.method == 'POST':
        users_dict = {}
        db = shelve.open('stock.db', 'c')

        try:
            users_dict = db['item']
        except:
            print("Error in retrieving Users from storage.db.")

        # stock_item = item.Stock_item(create_stock_item.stock_name, create_stock_item.supplier_name, create_stock_item.amt_of_stock, create_stock_item.stock_left)
        stock_item = item.Stock_item(create_stock_item.stock_name)
        users_dict[stock_item.get_id()] = stock_item
        print(users_dict)
        db['item'] = users_dict

        return redirect(url_for('stock'))
    return render_template('create_stock.html', form=create_stock_item)

    if request.method == 'POST':
        users_dict = {}
        db = shelve.open('stock.db', 'c')

        try:
            users_dict = db['item']
        except:
            print("Error in retrieving Users from storage.db.")

        stock_item = item.Stock_item(create_stock_item.stock_name, create_stock_item.supplier_name, create_stock_item.amt_of_stock, create_stock_item.stock_left)
        print(create_stock_item.stock_name)
        print(create_stock_item.stock_name.data)
        users_dict[stock_item.get_id()] = stock_item
        print(users_dict)
        db['item'] = users_dict

